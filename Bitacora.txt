- URL: https://www.youtube.com/watch?v=ta3v1eVXVNE

- Instala las siguientes dependencias
npm add -D typescript
npx tsc --init
npm i zod
npm add @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb aws-lambda uuid
npm add --dev @types/aws-lambda
npm add --dev @types/uuid
npm add @aws-sdk/client-s3
npm add @aws-sdk/s3-request-presigner
npm i --save-dev @types/node
npm install mysql2
npm install --save-dev @types/mysql2
npm i aws-sdk


- Edita tsconfig.json y deja:
{
  "compilerOptions": {
    "target": "ESNext",//Agrega para la validacion con zod
    "module": "NodeNext",//Agrega para la validacion con zod
    "moduleResolution": "NodeNext",//Agrega para la validacion con zod
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "outDir": "./build",//Donde se compilara
    "rootDir": "./app"//Loa agrego como root del proyecto
  }
}

- Instalación de myql seguir instrucción en herramientas esta :v

- Crea app > handlers > getBooks.ts

- Crear serveless.yml [copiar y pegar]

-------------------------------- Swagger ------------------------------------
Plugin para Serverless Framework [Descartado ensucia el .yml original]

npm i --save-dev @types/swagger-ui-express 
npm install js-yaml
npm install --save-dev @types/js-yaml
npm install swagger-ui-express js-yaml

-----------------------------------------------------------------------------

- Usar localmente para evitar errores, también se debe tocar el .yml:
npm install serverless-offline --save-dev
serverless offline start


- Correr el proyecto (es como un npm run start)(generara el build como en angular)(transpilado = sudado)
npx tsc

- Corre el proyecto:
sls deploy

- Ver los logs de cloudWatch desde la terminal:
sls logs -f [nombre de la función de yml puesta] -t
sls logs -f getBooks -t


--------------------------- Arquitectura actual ----------------------------------------
- copiar y pegar en el cmd:
tree /A /F | find /v "node_modules"